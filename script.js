/**
 * @file Script principal para a p√°gina da Piel Telecom.
 * @summary Gerencia a interatividade do menu, modais, formul√°rios, e as IAs de recomenda√ß√£o e conversa√ß√£o.
 * @version 4.0.0 - Edi√ß√£o Refatorada
 * @description Esta vers√£o centraliza os dados dos planos como uma "Fonte √önica de Verdade" no JavaScript,
 * eliminando a redund√¢ncia do HTML e corrigindo bugs cr√≠ticos de escopo na IA Jarvis.
 */

document.addEventListener('DOMContentLoaded', () => {

    /**
     * @module App
     * @description Objeto principal que encapsula toda a l√≥gica da aplica√ß√£o.
     */
    const App = {
        /**
         * Configura√ß√µes est√°ticas e chaves da aplica√ß√£o.
         */
        config: {
            whatsappNumber: '5513992006688',
            geminiApiKey: "AIzaSyDB3RFLt-hjYFWhtBKyqgVodWt4LqNoe_w", // Sua chave de API foi mantida.
            viacepUrl: 'https://viacep.com.br/ws/',
            geminiApiUrl: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=',
            desktopBreakpoint: '(min-width: 1024px)',
        },

        /**
         * Estado din√¢mico da aplica√ß√£o.
         */
        state: {
            selectedPlanInfo: {},
            availableCities: [],
            allPlans: [], 
            flickityRecommended: null,
        },

        /**
         * REESTRUTURADO: A base de conhecimento agora √© a fonte √∫nica de verdade para os planos.
         * Fica no n√≠vel do App para ser compartilhada entre a IA de recomenda√ß√£o e o Jarvis.
         */
        knowledge: {
            plans: { 
                "Fibra-Home-200M": { nome: "Fibra Home 200M+", preco: "R$79,99", download: "200 Mbps", upload: "100 Mbps", perfil: "Or√ßamento limitado, uso b√°sico (redes sociais, v√≠deos HD).", argumento: "Upload de 100 Mega, um bom diferencial para essa faixa de pre√ßo." }, 
                "Fibra-Home-400M": { nome: "Fibra Home 400M+", preco: "R$94,99", download: "400 Mbps", upload: "200 Mbps", perfil: "Fam√≠lia (uso simult√¢neo) e Home Office (videochamadas).", argumento: "200 Mega de upload, essencial para videochamadas com √≥tima qualidade e envio r√°pido de arquivos." }, 
                "Fibra-Home-600M": { nome: "Fibra Home 600M+", preco: "R$99,99", download: "600 Mbps", upload: "300 Mbps", perfil: "Melhor custo-benef√≠cio, fam√≠lias, streaming 4K.", argumento: "Por apenas R$ 5 a mais que o plano de 400M, o senhor leva 200 Mega a mais de download. √â um salto de performance muito grande por uma diferen√ßa m√≠nima." },
                "Fibra-Home-600M-Max": { nome: "Fibra Home 600M+ Max", preco: "R$119,99", download: "600 Mbps", upload: "300 Mbps", perfil: "Para quem precisa de melhor cobertura de sinal em casa.", argumento: "Este plano inclui um hardware superior, como um roteador Wi-Fi 6, para garantir que o sinal de Wi-Fi chegue com for√ßa total em mais ambientes." },
                "Fibra-Home-1G": { nome: "Fibra Home 1G+", preco: "R$119,99", download: "1 Gbps", upload: "500 Mbps", perfil: "Alta velocidade, m√°xima performance e downloads r√°pidos.", argumento: "Se o foco √© ter a velocidade bruta para baixar jogos rapidamente, este plano de 1 Giga entrega uma experi√™ncia fant√°stica." },
                "Fibra-Home-1G-Gamer": { nome: "Fibra Home 1G+ Gamer", preco: "R$169,99", download: "1 Gbps", upload: "500 Mbps", perfil: "Gamers competitivos e streamers (baixa lat√™ncia e alto upload).", argumento: "Ping baixo √© tudo. Este plano tem rotas otimizadas para servidores de jogos, e com 500 Mega de upload, suas lives ficam com qualidade profissional." },
                "Fibra-Home-1G-Home-Office": { nome: "Fibra Home 1G+ Home Office", preco: "R$169,99", download: "1 Gbps", upload: "500 Mbps", perfil: "Profissionais que precisam de m√°xima estabilidade para trabalho remoto.", argumento: "Plano pensado para o profissional. Tem otimiza√ß√£o para as principais ferramentas de trabalho, garantindo que sua internet n√£o falhe numa reuni√£o importante." },
                "Fibra-Home-1G-Black": { nome: "Fibra Home 1G+ Black", preco: "R$199,99", download: "1 Gbps", upload: "500 Mbps", perfil: "Heavy users e casas automatizadas com muitos dispositivos.", argumento: "Para quem precisa de velocidade e de um sinal que cubra a casa toda, o plano Black vem com equipamentos premium (Wi-Fi 6/6E)." },
                "Fibra-Home-1G-Black-Disney": { nome: "Fibra Home 1G+ Black c/ Disney+", preco: "R$239,99", download: "1 Gbps", upload: "500 Mbps", perfil: "Pacote completo com internet e entretenimento familiar.", argumento: "A internet mais r√°pida, equipamentos premium e Disney+ inclusos numa s√≥ fatura." },
                "Fibra-Home-Socio-Torcedor": { nome: "Fibra Home Socio Ponte Preta ou Guarani", preco: "Pre√ßo Especial", download: "800 Mbps", upload: "400 Mbps", perfil: "Exclusivo para s√≥cios torcedores da Ponte Preta ou Guarani.", argumento: "Se voc√™ √© torcedor de cora√ß√£o, temos um plano exclusivo que, al√©m de ter uma super velocidade, ainda ajuda o seu time." },
                "Fibra-Home-Combo-Movel": { nome: "Fibra Home 600M+ Combo M√≥vel", preco: "Consultar", download: "600 Mbps", upload: "300 Mbps", perfil: "Clientes que precisam de plano de celular e querem unificar as contas.", argumento: "Resolva tudo de uma vez. Com nosso combo, voc√™ leva uma internet de 600 Mega e um plano de celular em uma conta s√≥." } 
            }
        },

        nodes: {},

        /**
         * Ponto de entrada da aplica√ß√£o.
         */
        init() {
            // CORRIGIDO: O estado `allPlans` agora √© populado a partir da nova fonte √∫nica de verdade.
            this.state.allPlans = Object.entries(this.knowledge.plans).map(([id, details]) => ({ id, ...details }));
            
            this._mapDOMNodes();
            this._setupState();
            this._renderAllPlans(); 
            this._bindEvents();
            this._initPlugins();
            
            // O Jarvis √© inicializado por √∫ltimo, recebendo o 'App' como seu pai/contexto.
            this.jarvis.init(this);
            console.log("Aplica√ß√£o Piel Telecom v4.0.0 inicializada com sucesso. üöÄ");
        },

        // =======================================================
        // M√âTODOS DE INICIALIZA√á√ÉO E CONFIGURA√á√ÉO
        // =======================================================

        _mapDOMNodes() {
            const nodeSelectors = {
                menuBtn: '#menu-btn', mobileMenu: '#mobile-menu', menuIconOpen: '#menu-icon-open', menuIconClose: '#menu-icon-close', mobileMenuLinks: '.mobile-menu-link',
                fadeInElements: '.fade-in-element',
                promoCarousel: '#promo-carousel',
                recommendBtn: '#recommend-btn', needsInput: '#needs-input', recommendLoader: '#recommend-loader', recommenderError: '#recommender-error', recommendedContainer: '#recommended-plans-container', recommendedGrid: '#recommended-plans-grid', allPlansContainer: '#all-plans-container', allPlansStorage: '#all-plans-storage',
                cityModal: '#city-modal', cityModalPanel: '#city-modal-panel', closeCityModalBtn: '#close-city-modal-btn', citySearchInput: '#city-search-input', cityListContainer: '#city-list-container', cityListError: '#city-list-error', confirmCityBtn: '#confirm-city-btn',
                checkoutModal: '#checkout-modal', closeModalBtn: '#close-modal-btn', selectedPlanNameSpan: '#selected-plan-name',
                whatsappFormContainer: '#whatsapp-form-container', whatsappSuccessContainer: '#whatsapp-success', whatsappForm: '#whatsapp-form', whatsappSendLink: '#whatsapp-send-link', radioLabels: '.form-radio-label', radioError: '#radio-error-message',
                cepInput: '#wa-cep', cpfInput: '#wa-cpf', telInput: '#wa-tel1', ruaInput: '#wa-rua', bairroInput: '#wa-bairro', cidadeInput: '#wa-cidade',
            };
            for (const key in nodeSelectors) {
                if (key.endsWith('Links') || key.endsWith('Elements') || key.endsWith('Labels')) {
                    this.nodes[key] = document.querySelectorAll(nodeSelectors[key]);
                } else {
                    this.nodes[key] = document.querySelector(nodeSelectors[key]);
                }
            }
        },
        
        _setupState() {
            const citiesString = "Agua√≠, √Åguas de Santa B√°rbara, Agudos, Alum√≠nio, Americana, Am√©rico Brasiliense, Amparo, Angatuba, Ara√ßariguama, Ara√ßoiaba da Serra, Arandu, Araraquara, Araras, Arealva, Arei√≥polis, Artur Nogueira, Atibaia, Ava√≠, Avar√©, Bady Bassitt, Barra Bonita, Barretos, Bauru, Bebedouro, Biritiba-Mirim, Boa Esperan√ßa do Sul, Bocaina, Bofete, Boituva, Bom Jesus dos Perd√µes, Borborema, Borebi, Botucatu, Bragan√ßa Paulista, Cabre√∫va, Ca√ßapava, Cafel√¢ndia, Caieiras, Campina do Monte Alegre, Campinas, Campo Limpo Paulista, C√¢ndido Rodrigues, Capela do Alto, Capivari, Casa Branca, Cedral, Cerqueira C√©sar, Cerquilho, Ces√°rio Lange, Colina, Conchal, Conchas, Cordeir√≥polis, Cosm√≥polis, Cravinhos, Cristais Paulista, Cubat√£o, Descalvado, Dobrada, Dois C√≥rregos, Dourado, Elias Fausto, Engenheiro Coelho, Estiva Gerbi, Fernando Prestes, Franca, Francisco Morato, Franco da Rocha, Gavi√£o Peixoto, Gua√≠ra, Guapia√ßu, Guarant√£, Guararema, Guariba, Guaruj√°, Guatapar√°, Holambra, Hortol√¢ndia, Iaras, Ibat√©, Ibitinga, Igara√ßu do Tiet√™, Igarat√°, Indaiatuba, Iper√≥, Iracem√°polis, Ita√≠, Itajobi, Itaju, Itanha√©m, Itapetininga, It√°polis, Itapu√≠, Itatinga, Itirapu√£, Itu, Itupeva, Jaborandi, Jaboticabal, Jacare√≠, Jaguari√∫na, Jarinu, Ja√∫, Jumirim, Jundia√≠, Laranjal Paulista, Leme, Len√ß√≥is Paulista, Limeira, Lind√≥ia, Lins, Louveira, Macatuba, Mairipor√£, Manduri, Mat√£o, Mineiros do Tiet√™, Mirassol, Mogi das Cruzes, Mogi Gua√ßu, Mogi Mirim, Mongagu√°, Monte Alegre do Sul, Monte Alto, Monte Mor, Motuca, Nazar√© Paulista, Nova Europa, Nova Odessa, √ìleo, Ol√≠mpia, Paranapanema, Pardinho, Patroc√≠nio Paulista, Paul√≠nia, Pederneiras, Pedreira, Pereiras, Peru√≠be, Pilar do Sul, Pindorama, Piracaia, Piracicaba, Piraju√≠, Pirassununga, Piratininga, Pitangueiras, Porangaba, Porto Ferreira, Praia Grande, Prat√¢nia, Presidente Alves, Quadra, Rafard, Ribeir√£o Bonito, Ribeir√£o Corrente, Ribeir√£o Preto, Rinc√£o, Rio Claro, Rio das Pedras, Sales√≥polis, Saltinho, Salto de Pirapora, Santa Ad√©lia, Santa B√°rbara D‚ÄôOeste, Santa Branca, Santa Cruz das Palmeiras, Santa Ernestina, Santa Gertrudes, Santa L√∫cia, Santa Rita do Passa Quatro, Santa Rosa de Viterbo, Santo Ant√¥nio de Posse, Santos, S√£o Bernardo do Campo, S√£o Carlos, S√£o Jos√© do Rio Preto, S√£o Jos√© dos Campos, S√£o Manuel, S√£o Vicente, Sarapu√≠, Serra Azul, Serra Negra, Sorocaba, Sumar√©, Tabatinga, Tamba√∫, Taquaritinga, Tatu√≠, Taubat√©, Tiet√™, Trabiju, Trememb√©, Uchoa, Valinhos, V√°rzea Paulista, Vinhedo, Votorantim";
            this.state.availableCities = citiesString.split(', ').sort();
        },

        /**
         * MELHORIA: Renderiza todos os planos dinamicamente a partir da fonte √∫nica de verdade.
         * Isso elimina a necessidade de ter os planos hardcoded no HTML.
         */
        _renderAllPlans() {
            const promoFragment = document.createDocumentFragment();
            const storageFragment = document.createDocumentFragment();
            const promoPlanIds = ["Fibra-Home-200M", "Fibra-Home-600M", "Fibra-Home-1G"];

            this.state.allPlans.forEach(plan => {
                const planCard = document.createElement('div');
                planCard.id = plan.id;
                planCard.className = 'plan-card';
                planCard.dataset.price = plan.preco;
                planCard.dataset.plan = plan.nome;
                
                const features = [];
                if(plan.download) features.push(`Download: ${plan.download}`);
                if(plan.upload) features.push(`Upload: ${plan.upload}`);
                if(plan.argumento && promoPlanIds.includes(plan.id)) features.push(plan.argumento);


                planCard.innerHTML = `
                    <h3 class="text-2xl font-bold text-gray-900">${plan.nome}</h3>
                    <p class="text-gray-500 mb-4">${plan.perfil}</p>
                    <div class="my-4 text-gray-800"><p class="text-4xl font-extrabold">${plan.preco}</p></div>
                    <div class="flex-grow">
                        <ul class="space-y-3 mb-8 text-left">
                            ${features.map(f => `<li class="flex items-center"><i class="fas fa-check-circle text-green-500 mr-2 flex-shrink-0"></i><span>${f}</span></li>`).join('')}
                        </ul>
                    </div>
                    <div class="gemini-reason-container mt-auto"></div>
                    <button class="contratar-btn w-full bg-gray-800 hover:bg-black text-white font-bold py-3 px-6 rounded-lg text-lg transition-colors duration-300 flex items-center justify-center gap-2 mt-4">Contratar Agora <span class="arrow-icon">&rarr;</span></button>
                `;

                // Adiciona uma c√≥pia ao carrossel de promo√ß√£o se for um plano promocional
                if (promoPlanIds.includes(plan.id)) {
                    const carouselCell = document.createElement('div');
                    carouselCell.className = 'carousel-cell';
                    carouselCell.appendChild(planCard.cloneNode(true));
                    promoFragment.appendChild(carouselCell);
                }
                // Adiciona o card original ao template de armazenamento
                storageFragment.appendChild(planCard);
            });

            if (this.nodes.promoCarousel) {
                this.nodes.promoCarousel.innerHTML = ''; // Limpa antes de adicionar
                this.nodes.promoCarousel.appendChild(promoFragment);
            }
            if (this.nodes.allPlansStorage) {
                // O conte√∫do do template √© acessado via .content
                this.nodes.allPlansStorage.content.innerHTML = ''; // Limpa antes de adicionar
                this.nodes.allPlansStorage.content.appendChild(storageFragment);
            }
        },

        _bindEvents() {
            document.body.addEventListener('click', this._handleBodyClick.bind(this));
            this.nodes.menuBtn?.addEventListener('click', () => this._toggleMobileMenu());
            this.nodes.mobileMenuLinks?.forEach(link => link.addEventListener('click', () => this._toggleMobileMenu()));
            this.nodes.recommendBtn?.addEventListener('click', () => this._handleRecommendation());
            this.nodes.closeCityModalBtn?.addEventListener('click', () => this._closeCityModal());
            this.nodes.cityModal?.addEventListener('click', e => { if (e.target === this.nodes.cityModal) this._closeCityModal(); });
            this.nodes.citySearchInput?.addEventListener('input', () => this._filterCities());
            this.nodes.cityListContainer?.addEventListener('click', e => this._handleCitySelection(e));
            this.nodes.confirmCityBtn?.addEventListener('click', () => this._confirmCitySelection());
            this.nodes.closeModalBtn?.addEventListener('click', () => this._closeCheckoutModal());
            this.nodes.checkoutModal?.addEventListener('click', e => { if (e.target === this.nodes.checkoutModal) this._closeCheckoutModal(); });
            document.addEventListener('keydown', e => { if (e.key === 'Escape' && !this.nodes.checkoutModal?.classList.contains('hidden')) this._closeCheckoutModal(); });
            this.nodes.whatsappForm?.addEventListener('submit', e => this._handleWhatsappSubmit(e));
            this.nodes.radioLabels?.forEach(label => label.addEventListener('click', e => this._handleRadioChange(e)));
            this._applyInputMask(this.nodes.cpfInput, this._maskCPF);
            this._applyInputMask(this.nodes.telInput, this._maskTel);
            this._applyInputMask(this.nodes.cepInput, this._maskCEP);
            this.nodes.cepInput?.addEventListener('blur', e => this._fetchAddressFromCEP(e.target.value));
            window.addEventListener('resize', () => this._updateRecommendedPlansLayout());
        },

        _initPlugins() {
            // L√≥gica do IntersectionObserver para anima√ß√µes de fade-in
            if ('IntersectionObserver' in window && this.nodes.fadeInElements?.length) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('is-visible');
                            observer.unobserve(entry.target);
                        }
                    });
                }, { threshold: 0.1 });
                this.nodes.fadeInElements.forEach(el => observer.observe(el));
            }
            // L√≥gica do carrossel Flickity
            if (this.nodes.promoCarousel && typeof Flickity !== 'undefined') {
                let promoFlickity = null;
                const mediaQuery = window.matchMedia('(max-width: 1023px)');

                const handleCarousel = (e) => {
                    if (e.matches) {
                        if (!promoFlickity) {
                            promoFlickity = new Flickity(this.nodes.promoCarousel, {
                                wrapAround: true, autoPlay: 5000, pageDots: true, cellAlign: 'left', contain: true, imagesLoaded: true
                            });
                        }
                    } else {
                        if (promoFlickity) {
                            promoFlickity.destroy();
                            promoFlickity = null;
                        }
                    }
                };
                handleCarousel(mediaQuery);
                mediaQuery.addEventListener('change', handleCarousel);
            }
        },

        // ... (Todos os outros m√©todos de utilidade, modais e formul√°rios permanecem os mesmos) ...
        _displayUserError(message, errorElement) { if (errorElement) { errorElement.textContent = message; errorElement.classList.remove('hidden'); } },
        _normalizeText: text => text.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase(),
        _toggleMobileMenu() { if (!this.nodes.menuBtn || !this.nodes.mobileMenu) return; const isExpanded = this.nodes.menuBtn.getAttribute('aria-expanded') === 'true'; this.nodes.menuBtn.setAttribute('aria-expanded', !isExpanded); this.nodes.mobileMenu.classList.toggle('hidden'); this.nodes.menuIconOpen?.classList.toggle('hidden'); this.nodes.menuIconClose?.classList.toggle('hidden'); },
        
        async _handleRecommendation() {
            const userInput = this.nodes.needsInput.value.trim();
            if (!userInput) { this._displayUserError("Por favor, descreva sua necessidade para a IA.", this.nodes.recommenderError); return; }
            if (!this.config.geminiApiKey.startsWith("AIza")) { this._displayUserError("A chave da API do Google n√£o foi configurada ou √© inv√°lida.", this.nodes.recommenderError); console.error("Chave de API do Gemini inv√°lida ou n√£o configurada no objeto App.config."); return; }
            
            this.nodes.recommenderError?.classList.add('hidden');
            this.nodes.recommendLoader?.classList.remove('hidden');
            if (this.nodes.recommendBtn) this.nodes.recommendBtn.disabled = true;

            const prompt = `Voc√™ √© um assistente especialista em vendas de planos de internet da empresa Piel Telecom. Sua tarefa √© analisar a necessidade de um cliente e recomendar os 3 melhores planos de internet para ele, com base na lista de planos dispon√≠veis. **Necessidade do Cliente:** "${userInput}" **Lista de Planos Dispon√≠veis (formato JSON):** ${JSON.stringify(this.state.allPlans, null, 2)} **Instru√ß√µes:** 1. Analise a necessidade do cliente e compare com os detalhes de cada plano. 2. Selecione os 3 planos mais adequados. 3. Para cada plano recomendado, escreva uma justificativa curta e amig√°vel (em portugu√™s do Brasil). 4. Retorne sua resposta estritamente no formato JSON especificado no schema. N√£o inclua nenhuma outra informa√ß√£o ou texto fora do JSON. 5. IMPORTANTE: Assegure que o JSON de sa√≠da seja perfeitamente v√°lido. O campo "reason" deve ser uma string √∫nica, sem quebras de linha literais e com aspas duplas devidamente escapadas (\\").`;
            const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }], generationConfig: { responseMimeType: "application/json", responseSchema: { type: "OBJECT", properties: { "recommendations": { type: "ARRAY", items: { type: "OBJECT", properties: { "planId": { "type": "STRING" }, "reason": { "type": "STRING" } }, required: ["planId", "reason"] } } }, required: ["recommendations"] } } };
            const apiUrl = `${this.config.geminiApiUrl}${this.config.geminiApiKey}`;

            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) { const errorBody = await response.text(); console.error("API Error Response:", errorBody); throw new Error(`API Error: ${response.status}`); }
                const result = await response.json();
                const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;
                if (!jsonText) { throw new Error("A resposta da IA est√° vazia ou em formato inesperado."); }
                this._renderRecommendations(JSON.parse(jsonText));
            } catch (error) {
                console.error("Falha detalhada na recomenda√ß√£o da API Gemini:", error);
                let userMessage = "Desculpe, a IA n√£o conseguiu gerar uma recomenda√ß√£o. Tente novamente.";
                if (error.message.includes("API Error: 400")) { userMessage = "Ocorreu um erro na requisi√ß√£o √† IA (Bad Request). Verifique o console para mais detalhes."; }
                else if (error.message.includes("API Error: 403")) { userMessage = "Erro de permiss√£o. Verifique se a chave de API √© v√°lida e est√° habilitada para o servi√ßo Gemini."; }
                else if (error.message.includes("inesperado")) { userMessage = "A IA retornou uma resposta em um formato inesperado. Tente reformular sua necessidade."; }
                this._displayUserError(userMessage, this.nodes.recommenderError);
            } finally {
                this.nodes.recommendLoader?.classList.add('hidden');
                if (this.nodes.recommendBtn) this.nodes.recommendBtn.disabled = false;
            }
        },

        _renderRecommendations(result) {
            if (!this.nodes.recommendedGrid) return;
            if (this.state.flickityRecommended) { this.state.flickityRecommended.destroy(); this.state.flickityRecommended = null; }
            this.nodes.recommendedGrid.innerHTML = '';
            if (!result.recommendations?.length) { this._displayUserError("N√£o foram encontradas recomenda√ß√µes adequadas.", this.nodes.recommenderError); return; }

            result.recommendations.forEach(rec => {
                const originalCard = this.nodes.allPlansStorage.content.getElementById(rec.planId);
                if (originalCard) {
                    const clonedCardContainer = document.createElement('div');
                    clonedCardContainer.className = 'carousel-cell w-full sm:w-1/2 lg:w-1/3 px-2';
                    const clonedCard = originalCard.cloneNode(true);
                    const reasonContainer = clonedCard.querySelector('.gemini-reason-container');
                    if (reasonContainer) { reasonContainer.innerHTML = `<div class="p-3 mt-4 bg-yellow-50 border-l-4 border-yellow-400 text-sm text-yellow-800 rounded-r-lg"><strong>‚ú® Recomenda√ß√£o da IA:</strong> ${rec.reason}</div>`; }
                    clonedCardContainer.appendChild(clonedCard);
                    this.nodes.recommendedGrid.appendChild(clonedCardContainer);
                }
            });
            
            this.nodes.allPlansContainer?.classList.add('hidden');
            this.nodes.recommendedContainer?.classList.remove('hidden');
            this._updateRecommendedPlansLayout();
            this.nodes.recommendedContainer?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        },

        _updateRecommendedPlansLayout() {
            if (!this.nodes.recommendedGrid || typeof Flickity === 'undefined') return;
            const isDesktop = window.matchMedia(this.config.desktopBreakpoint).matches;
            this.nodes.recommendedGrid.classList.toggle('lg:flex', isDesktop);
            this.nodes.recommendedGrid.classList.toggle('lg:justify-center', isDesktop);
            if (isDesktop) { if (this.state.flickityRecommended) { this.state.flickityRecommended.destroy(); this.state.flickityRecommended = null; } }
            else { if (!this.state.flickityRecommended && this.nodes.recommendedGrid.children.length > 0) { this.state.flickityRecommended = new Flickity(this.nodes.recommendedGrid, { wrapAround: true, pageDots: true, cellAlign: 'left', contain: true, imagesLoaded: true }); } }
        },
        
        _handleBodyClick(e) { const contratarBtn = e.target.closest('.contratar-btn'); if (contratarBtn) { e.preventDefault(); const card = contratarBtn.closest('.plan-card'); if (card) { this.state.selectedPlanInfo = { plan: card.dataset.plan, price: card.dataset.price }; this._openCityModal(); } } },
        _openCityModal() { if (!this.nodes.cityModal) return; this.nodes.citySearchInput.value = ''; this._renderCityList(this.state.availableCities); if (this.nodes.confirmCityBtn) this.nodes.confirmCityBtn.disabled = true; this.nodes.cityModal.classList.remove('hidden'); document.body.style.overflow = 'hidden'; setTimeout(() => { this.nodes.cityModalPanel?.classList.remove('opacity-0', '-translate-y-4'); this.nodes.citySearchInput.focus(); }, 50); },
        _closeCityModal() { if (!this.nodes.cityModal) return; this.nodes.cityModalPanel?.classList.add('opacity-0', '-translate-y-4'); setTimeout(() => { this.nodes.cityModal.classList.add('hidden'); document.body.style.overflow = 'auto'; }, 300); },
        _openCheckoutModal() { if (!this.nodes.checkoutModal || !this.nodes.whatsappForm) return; this.nodes.selectedPlanNameSpan.textContent = this.state.selectedPlanInfo.plan; this.nodes.whatsappForm.dataset.plan = this.state.selectedPlanInfo.plan; this.nodes.whatsappForm.dataset.price = this.state.selectedPlanInfo.price; this.nodes.whatsappForm.reset(); this._clearFormErrors(); this.nodes.radioLabels.forEach(label => label.classList.remove('is-checked')); this.nodes.whatsappFormContainer.classList.remove('hidden'); this.nodes.whatsappSuccessContainer.classList.add('hidden'); this.nodes.checkoutModal.classList.remove('hidden'); document.body.style.overflow = 'hidden'; this.nodes.checkoutModal.focus(); },
        _closeCheckoutModal() { if (!this.nodes.checkoutModal) return; this.nodes.checkoutModal.classList.add('hidden'); document.body.style.overflow = 'auto'; },
        _renderCityList(cities) { if (!this.nodes.cityListContainer || !this.nodes.cityListError) return; this.nodes.cityListContainer.innerHTML = ''; this.nodes.cityListError.classList.toggle('hidden', cities.length > 0); const fragment = document.createDocumentFragment(); cities.forEach(city => { const cityButton = document.createElement('button'); cityButton.className = 'w-full text-left px-4 py-2 text-gray-700 hover:bg-yellow-50 hover:text-brand-gold transition-colors duration-150 rounded'; cityButton.textContent = city; cityButton.type = 'button'; fragment.appendChild(cityButton); }); this.nodes.cityListContainer.appendChild(fragment); },
        _filterCities() { const searchTerm = this._normalizeText(this.nodes.citySearchInput.value); const filtered = this.state.availableCities.filter(city => this._normalizeText(city).includes(searchTerm)); this._renderCityList(filtered); this._validateCitySelection(); },
        _handleCitySelection(e) { if (e.target.tagName === 'BUTTON') { this.nodes.citySearchInput.value = e.target.textContent; this._filterCities(); if (this.nodes.confirmCityBtn) this.nodes.confirmCityBtn.focus(); } },
        _validateCitySelection() { const currentInput = this._normalizeText(this.nodes.citySearchInput.value); const isValid = this.state.availableCities.some(city => this._normalizeText(city) === currentInput); if (this.nodes.confirmCityBtn) this.nodes.confirmCityBtn.disabled = !isValid; },
        _confirmCitySelection() { this._openCheckoutModal(); this._closeCityModal(); },
        _applyInputMask(input, maskFunction) { if (input) { input.addEventListener('input', (e) => { e.target.value = maskFunction(e.target.value); }); } },
        _maskCPF: value => value.replace(/\D/g, '').replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d{1,2})$/, '$1-$2'),
        _maskTel: value => value.replace(/\D/g, '').replace(/(\d{2})(\d)/, '($1) $2').replace(/(\d{5})(\d)/, '$1-$2').replace(/(-\d{4})\d+?$/, '$1'),
        _maskCEP: value => value.replace(/\D/g, '').replace(/(\d{5})(\d)/, '$1-$2').replace(/(-\d{3})\d+?$/, '$1'),
        async _fetchAddressFromCEP(cep) { const cleanCep = cep.replace(/\D/g, ''); if (cleanCep.length !== 8) return; try { const response = await fetch(`${this.config.viacepUrl}${cleanCep}/json/`); if (!response.ok) throw new Error('CEP n√£o encontrado'); const address = await response.json(); if (address.erro) throw new Error('CEP inv√°lido'); if (this.nodes.ruaInput) this.nodes.ruaInput.value = address.logradouro || ''; if (this.nodes.bairroInput) this.nodes.bairroInput.value = address.bairro || ''; if (this.nodes.cidadeInput) this.nodes.cidadeInput.value = address.localidade || ''; } catch (error) { console.error("Erro ao buscar CEP:", error); } },
        _validateField(input) { let isValid = input.checkValidity(); const errorContainer = input.nextElementSibling; if (input.name === 'wa-cpf') isValid = isValid && /^\d{3}\.\d{3}\.\d{3}-\d{2}$/.test(input.value); if (input.name === 'wa-tel1') isValid = isValid && /^\(\d{2}\) \d{5}-\d{4}$/.test(input.value); if (input.name === 'wa-cep') isValid = isValid && /^\d{5}-\d{3}$/.test(input.value); if (errorContainer?.classList.contains('error-message')) { input.classList.toggle('is-invalid', !isValid); errorContainer.textContent = isValid ? '' : (input.validationMessage || 'Campo inv√°lido.'); } return isValid; },
        _clearFormErrors() { if (!this.nodes.whatsappForm) return; this.nodes.whatsappForm.querySelectorAll('.form-input').forEach(input => { input.classList.remove('is-invalid'); const errorEl = input.nextElementSibling; if (errorEl?.classList.contains('error-message')) { errorEl.textContent = ''; } }); if (this.nodes.radioError) this.nodes.radioError.textContent = ''; },
        _handleRadioChange(event) { const currentLabel = event.currentTarget; this.nodes.radioLabels.forEach(label => label.classList.remove('is-checked')); currentLabel.classList.add('is-checked'); if(this.nodes.radioError) this.nodes.radioError.textContent = ''; },
        async _handleWhatsappSubmit(e) { e.preventDefault(); this._clearFormErrors(); let isFormValid = Array.from(this.nodes.whatsappForm.querySelectorAll('input[required]:not([type=radio])')).every(input => this._validateField(input)); const radioChecked = this.nodes.whatsappForm.querySelector('input[name="installation_period"]:checked'); if (!radioChecked) { if(this.nodes.radioError) this.nodes.radioError.textContent = 'Por favor, selecione um per√≠odo.'; isFormValid = false; } if (!isFormValid) return; const formData = new FormData(this.nodes.whatsappForm); const data = Object.fromEntries(formData.entries()); const { plan, price } = this.nodes.whatsappForm.dataset; const message = `‚ú® NOVO PEDIDO DE CADASTRO ‚ú®\n-----------------------------------\nPlano Escolhido: *${plan}*\nValor: *${price}*\n-----------------------------------\nüîπ NOME COMPLETO: ${data['wa-nome']}\nüîπ NOME DA M√ÉE: ${data['wa-mae']}\nüîπ DATA DE NASCIMENTO: ${data['wa-nascimento']}\nüîπ CPF: ${data['wa-cpf']}\nüîπ RG: ${data['wa-rg']}\nüìß E-MAIL: ${data['wa-email']}\nüîπ TELEFONE TITULAR: ${data['wa-tel1']}\nüîπ ENDERE√áO: Rua ${data['wa-rua']}, N¬∫ ${data['wa-numero']}, Bairro ${data['wa-bairro']}, Cidade ${data['wa-cidade']}, CEP ${data['wa-cep']}\nüîπ INSTALA√á√ÉO: ${data.installation_period}`; if (this.nodes.whatsappSendLink) this.nodes.whatsappSendLink.href = `https://wa.me/${this.config.whatsappNumber}?text=${encodeURIComponent(message)}`; this.nodes.whatsappFormContainer.classList.add('hidden'); this.nodes.whatsappSuccessContainer.classList.remove('hidden'); },

        // =======================================================
        // M√ìDULO JARVIS - IA DE CONVERSA√á√ÉO
        // =======================================================
        jarvis: {
            parent: null,
            nodes: {},
            state: { session: null, isOpen: false, },
            
            init(parent) { 
                this.parent = parent; // O `parent` √© o objeto `App` principal
                this._mapDOMNodes(); 
                this._bindEvents(); 
            },

            _mapDOMNodes() {
                this.nodes = { // O Jarvis gerencia apenas os n√≥s do seu pr√≥prio widget
                    chatButton: document.querySelector('#jarvis-chat-button'),
                    chatContainer: document.querySelector('#jarvis-chat-container'),
                    chatLog: document.querySelector('#jarvis-chat-log'),
                    userInput: document.querySelector('#jarvis-user-input'),
                    sendButton: document.querySelector('#jarvis-send-button'),
                    openIcon: document.querySelector('#jarvis-chat-button .fa-comment-dots'),
                    closeIcon: document.querySelector('#jarvis-chat-button .fa-times'),
                    mobileCloseBtn: document.querySelector('#jarvis-close-btn-mobile'),
                };
            },

            _bindEvents() {
                this.nodes.chatButton?.addEventListener('click', () => this.toggleChat());
                this.nodes.mobileCloseBtn?.addEventListener('click', () => this.toggleChat());
                this.nodes.sendButton?.addEventListener('click', () => this.sendUserMessage());
                this.nodes.userInput?.addEventListener('keydown', e => {
                    if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendUserMessage(); }
                });
            },

            toggleChat() {
                if (!this.nodes.chatContainer) return;
                this.state.isOpen = this.nodes.chatContainer.classList.toggle('is-open');
                this.nodes.openIcon?.classList.toggle('hidden', this.state.isOpen);
                this.nodes.closeIcon?.classList.toggle('hidden', !this.state.isOpen);
                if (this.state.isOpen && !this.state.session) { this._initSession(); }
                if(this.state.isOpen) this.nodes.userInput.focus();
            },

            async sendUserMessage() {
                const message = this.nodes.userInput.value.trim();
                if (message === '' || this.nodes.userInput.disabled) return;
                this._addMessageToLog(message, 'user');
                this.nodes.userInput.value = '';
                this._setChatInputDisabled(true);
                try {
                    await this._handleMessage(message); 
                } catch (error) {
                    console.error("Erro no fluxo principal da mensagem do Jarvis:", error);
                    this._addMessageToLog("Desculpe, Senhor. Ocorreu um erro interno. Por favor, tente novamente.", 'jarvis');
                } finally {
                    this._setChatInputDisabled(false);
                }
            },

            async _handleMessage(message) {
                if(!this.state.session) this._initSession();
                this.state.session.history.push({ role: "user", parts: [{ text: message }] });

                let shouldContinue = true;
                while(shouldContinue) {
                    shouldContinue = false;
                    this._addTypingIndicator();
                    
                    let apiResponse;
                    try {
                        apiResponse = await this._callGeminiAPI(this.state.session.history);
                    } finally {
                        this._removeTypingIndicator();
                    }

                    if (apiResponse.error) { this._addMessageToLog(apiResponse.error, 'jarvis'); return; }
                    if (!apiResponse.candidates?.length) { this._addMessageToLog("Desculpe, n√£o consegui processar sua solicita√ß√£o.", 'jarvis'); return; }

                    const responseContent = apiResponse.candidates[0].content;
                    this.state.session.history.push(responseContent);

                    let functionCallPart = null;
                    for (const part of responseContent.parts) {
                        if (part.text) {
                            this._addMessageToLog(part.text, 'jarvis');
                        } else if (part.functionCall) {
                            functionCallPart = part.functionCall;
                        }
                    }

                    if (functionCallPart) {
                        const functionName = functionCallPart.name;
                        const functionArgs = functionCallPart.args;
                        let toolResult = {};
                        try {
                            if (this.knowledge.toolFunctions[functionName]) {
                                // CORRIGIDO: Chamamos a fun√ß√£o usando .call() para passar o contexto do App.
                                // Isso garante que `this.knowledge.plans` estar√° dispon√≠vel dentro da fun√ß√£o da ferramenta.
                                toolResult = await this.knowledge.toolFunctions[functionName].call(this.parent, functionArgs);
                            } else {
                                toolResult = { error: `Ferramenta ${functionName} n√£o encontrada.` };
                            }
                        } catch (error) {
                             console.error(`Erro ao executar a ferramenta Jarvis '${functionName}':`, error);
                             toolResult = { error: `Ocorreu um erro interno ao usar a ferramenta ${functionName}.` };
                        }
                        
                        this.state.session.history.push({ 
                            role: "tool", 
                            parts: [{ functionResponse: { name: functionName, response: toolResult } }] 
                        });
                        shouldContinue = true;
                    }
                }
            },

            async _callGeminiAPI(history) {
                // Acessa a config atrav√©s do `this.parent` (que √© o App)
                if (!this.parent.config.geminiApiKey.startsWith("AIza")) {
                     console.error("Chave de API do Gemini inv√°lida ou n√£o configurada para o Jarvis.");
                     return { error: "A conex√£o com a IA n√£o foi configurada corretamente." };
                }
                const apiUrl = `${this.parent.config.geminiApiUrl}${this.parent.config.geminiApiKey}`;
                const payload = { contents: history, tools: this.knowledge.tools };
                try {
                    const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                    if (!response.ok) {
                         const errorText = await response.text();
                         console.error("Gemini API error response:", errorText);
                         throw new Error(`API Error: ${response.status}`);
                    }
                    return await response.json();
                } catch (error) {
                    console.error("Gemini API call failed:", error);
                    return { error: "N√£o foi poss√≠vel conectar √† IA. Tente novamente mais tarde." };
                }
            },

            _initSession() {
                if (!this.state.session) {
                    this.state.session = {
                        history: [
                            { role: "user", parts: [{ text: this.parent.jarvis.knowledge.systemPrompt }] },
                            { role: "model", parts: [{ text: "Ol√°! Eu sou o Jarvis, assistente virtual da Piel Telecom, um agente autorizado Desktop. Para que eu possa encontrar o plano de internet ideal para o Senhor, poderia me dizer qual ser√° o principal uso da sua internet?" }] }
                        ]
                    };
                    // CORRE√á√ÉO: Exibe a primeira mensagem do Jarvis sem usar "n√∫meros m√°gicos"
                    this._addMessageToLog(this.state.session.history[1].parts[0].text, 'jarvis');
                }
            },
            
            _addMessageToLog(message, sender) { if (!this.nodes.chatLog) return; const messageContainer = document.createElement('div'); messageContainer.className = sender === 'user' ? 'user-message' : 'jarvis-message'; const bubble = document.createElement('div'); bubble.className = 'message-bubble'; bubble.innerHTML = message.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\n/g, '<br>'); messageContainer.appendChild(bubble); this.nodes.chatLog.appendChild(messageContainer); this.nodes.chatLog.scrollTop = this.nodes.chatLog.scrollHeight; },
            _addTypingIndicator() { if(document.getElementById('typing-indicator-bubble')) return; const indicator = document.createElement('div'); indicator.id = 'typing-indicator-bubble'; indicator.className = 'jarvis-message'; indicator.innerHTML = `<div class="message-bubble"><div class="typing-indicator"><span></span><span></span><span></span></div></div>`; this.nodes.chatLog.appendChild(indicator); this.nodes.chatLog.scrollTop = this.nodes.chatLog.scrollHeight; },
            _removeTypingIndicator() { document.getElementById('typing-indicator-bubble')?.remove(); },
            _setChatInputDisabled(isDisabled) { if (this.nodes.userInput) this.nodes.userInput.disabled = isDisabled; if (this.nodes.sendButton) this.nodes.sendButton.disabled = isDisabled; if (!isDisabled && this.state.isOpen) this.nodes.userInput.focus(); },
            
            knowledge: {
                systemPrompt: `System instruction: [COLE SEU PROMPT COMPLETO DO JARVIS AQUI, POIS ELE √â MUITO LONGO PARA INCLUIR NESTA RESPOSTA]`,
                tools: [{
                    functionDeclarations: [
                        { name: "start_customer_registration", description: "Inicia o processo de cadastro do cliente ap√≥s ele ter fornecido todos os dados necess√°rios e confirmado o plano.", parameters: { type: "OBJECT", properties: { plano: { type: "STRING" }, nome_completo: { type: "STRING" }, nome_mae: { type: "STRING" }, data_nascimento: { type: "STRING" }, cpf: { type: "STRING" }, rg: { type: "STRING" }, email: { type: "STRING" }, rua_numero: { type: "STRING" }, bairro: { type: "STRING" }, cidade: { type: "STRING" }, cep: { type: "STRING" }, periodo_instalacao: { type: "STRING" } }, required: ["plano", "nome_completo", "nome_mae", "data_nascimento", "cpf", "rg", "email", "rua_numero", "bairro", "cidade", "cep", "periodo_instalacao"] } },
                        { name: "validate_cpf", description: "Valida um n√∫mero de CPF para verificar se √© um documento matematicamente v√°lido.", parameters: { type: "OBJECT", properties: { cpf: { type: "STRING" } }, required: ["cpf"] } },
                        { name: "validate_rg", description: "Valida um n√∫mero de RG para verificar se tem um formato plaus√≠vel (apenas contagem de d√≠gitos).", parameters: { type: "OBJECT", properties: { rg: { type: "STRING" } }, required: ["rg"] } },
                        { name: "get_plan_details", description: "Busca e retorna os detalhes de todos os planos de internet que contenham o termo pesquisado. √ötil para perguntas como 'quais os planos de 1 giga?'.", parameters: { type: "OBJECT", properties: { termo_de_busca: { type: "STRING", description: "O termo para buscar nos nomes dos planos, ex: '600M' ou 'Gamer'" } }, required: ["termo_de_busca"] } }
                    ]
                }],
                toolFunctions: {
                    validate_cpf: async ({ cpf }) => { cpf = cpf.replace(/[^\d]+/g, ''); if (cpf.length !== 11 || /^(\d)\1{10}$/.test(cpf)) return { "isValid": false }; let sum = 0, remainder; for (let i = 1; i <= 9; i++) sum += parseInt(cpf.substring(i - 1, i)) * (11 - i); remainder = (sum * 10) % 11; if ((remainder === 10) || (remainder === 11)) remainder = 0; if (remainder !== parseInt(cpf.substring(9, 10))) return { "isValid": false }; sum = 0; for (let i = 1; i <= 10; i++) sum += parseInt(cpf.substring(i - 1, i)) * (12 - i); remainder = (sum * 10) % 11; if ((remainder === 10) || (remainder === 11)) remainder = 0; if (remainder !== parseInt(cpf.substring(10, 11))) return { "isValid": false }; return { "isValid": true }; },
                    validate_rg: async ({ rg }) => {
                        const cleanedRg = typeof rg === 'string' ? rg.replace(/[^\dX]+/gi, '') : '';
                        return { isValid: cleanedRg.length >= 7 && cleanedRg.length <= 10 };
                    },
                    /**
                     * MELHORIA: A fun√ß√£o agora busca em todos os planos e retorna uma lista de correspond√™ncias.
                     * @param {object} args - Argumentos da fun√ß√£o, ex: { termo_de_busca: '600M' }.
                     * @returns {Promise<object>}
                     */
                    get_plan_details: async function({ termo_de_busca }) {
                        // `this` aqui se refere ao objeto `App` gra√ßas ao .call()
                        const allPlans = Object.values(this.knowledge.plans);
                        const searchResults = allPlans.filter(plan =>
                            plan.nome.toLowerCase().includes(termo_de_busca.toLowerCase())
                        );
                        if (searchResults.length > 0) {
                            return { success: true, plans_found: searchResults };
                        }
                        return { success: false, message: "Nenhum plano encontrado para: " + termo_de_busca };
                    },
                    start_customer_registration: async (data) => { 
                        console.log("REGISTRATION DATA TO BE SENT TO CRM:", data); 
                        return { success: true, message: "Cadastro recebido. Um consultor humano ir√° revisar e confirmar os detalhes." }; 
                    }
                }
            }
        },
    }
    // Inicia a aplica√ß√£o.
    App.init();
});