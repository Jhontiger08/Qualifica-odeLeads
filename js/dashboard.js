import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
import { getFirestore, collection, doc, addDoc, getDoc, updateDoc, deleteDoc, onSnapshot, query, where, orderBy, serverTimestamp, writeBatch, getDocs, setDoc, arrayUnion, arrayRemove } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

const firebaseConfig = { apiKey: "AIzaSyCTAaa5sF_O4S38FpyV_mL2hpB0xGXgAv4", authDomain: "qualificacao-a14ff.firebaseapp.com", projectId: "qualificacao-a14ff", storageBucket: "qualificacao-a14ff.appspot.com", messagingSenderId: "955642076737", appId: "1:955642076737:web:f6db77134cd6a18b8f30c0" };

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

document.addEventListener('DOMContentLoaded', () => {
    onAuthStateChanged(auth, async (user) => {
        const authCheckDiv = document.getElementById('auth-check');
        const accessDeniedDiv = document.getElementById('access-denied');
        const dashboardAppDiv = document.getElementById('dashboard-app');

        if (user) {
            const userDoc = await getDoc(doc(db, 'users', user.uid));
            if (userDoc.exists() && userDoc.data().role === 'admin') {
                authCheckDiv.classList.add('hidden');
                dashboardAppDiv.classList.remove('hidden');
                initializeAppDashboard(user);
            } else {
                authCheckDiv.classList.add('hidden');
                accessDeniedDiv.classList.remove('hidden');
            }
        } else {
            authCheckDiv.classList.add('hidden');
            accessDeniedDiv.classList.remove('hidden');
        }
    });
});

function initializeAppDashboard(adminUser) {
    // --- Variáveis de Estado da Aplicação ---
    let allLeadsData = [], allUsersData = [], allQualificacoesData = [], allProductsData = [], financeConfig = {};
    let chartInstances = {}, confirmCallback, currentCaseData, currentReportData = null, currentEditingQualificacaoId = null, currentEditingLeadId = null, currentUserForReport = null, currentEditingProductId = null, selectedSupervisorId = null;

    // --- Seletores de Elementos DOM ---
    const pageTitle = document.getElementById('page-title');
    const navLinks = document.querySelectorAll('.nav-link'), pageSections = document.querySelectorAll('.page-section');
    const confirmationModal = document.getElementById('confirmationModal'), caseDetailsModal = document.getElementById('caseDetailsModal'), reportDetailsModal = document.getElementById('reportDetailsModal'), editQualificacaoModal = document.getElementById('editQualificacaoModal'), salesModal = document.getElementById('salesModal'), sellerReportModal = document.getElementById('sellerReportModal');
    const productForm = document.getElementById('product-form'), productFormTitle = document.getElementById('product-form-title'), saveProductBtn = document.getElementById('save-product-btn'), cancelEditBtn = document.getElementById('cancel-edit-product-btn');

    // --- Funções Utilitárias ---
    const renderTable = (tbodyId, data, rowTemplate) => { const el = document.getElementById(tbodyId); if (el) el.innerHTML = data.map(rowTemplate).join(''); };
    const createLog = async (action, details) => await addDoc(collection(db, 'logs'), { action, details, userEmail: adminUser.email, timestamp: serverTimestamp() });
    const showConfirmationModal = (title, msg, cb) => { document.getElementById('modalTitle').textContent = title; document.getElementById('modalMessage').textContent = msg; confirmCallback = cb; confirmationModal.classList.remove('hidden'); };
    const downloadCSV = (data, filename) => { const headers = ["Contato", "Vendedor", "Fonte", "Qualificacao", "Status Agendamento"]; const csvRows = [headers.join(';')]; data.forEach(l => { const row = [`"${l.contato||''}"`, `"${l.vendedor||''}"`, `"${l.fonte||''}"`, `"${l.qualificacao||''}"`, `"${l.subStatusAgendamento||''}"`]; csvRows.push(row.join(';')); }); const link = document.createElement("a"); link.href = URL.createObjectURL(new Blob([`\uFEFF${csvRows.join('\r\n')}`], { type: 'text/csv;charset=utf-8;' })); link.setAttribute("download", `${filename}.csv`); document.body.appendChild(link); link.click(); document.body.removeChild(link); };

    // --- Funções de Renderização da UI ---
    const renderChart = (id, type, labels, data, label) => { if (chartInstances[id]) chartInstances[id].destroy(); const ctx = document.getElementById(id)?.getContext('2d'); if (ctx) { chartInstances[id] = new Chart(ctx, { type, data: { labels, datasets: [{ label, data, backgroundColor: ['#3B82F6', '#EF4444', '#FFC107', '#87CEEB', '#28A745', '#BDB76B', '#4682B4', '#8A2BE2', '#006400', '#FF4500', '#696969'] }] } }); } };
    const populateFilter = (id, options) => { const select = document.getElementById(id); if (select) { const current = select.value; select.innerHTML = `<option value="all">${id.includes('vendedor') ? 'Todos os Vendedores' : (id.includes('fonte') ? 'Todas as Fontes' : 'Todas as Qualificações')}</option>`; options.forEach(opt => select.innerHTML += `<option value="${opt}">${opt}</option>`); select.value = current || 'all'; } };
    const renderUsersTable = users => renderTable('users-table', users.sort((a,b) => (a.nome || '').localeCompare(b.nome || '')), u => { const roleBadges = { admin: 'bg-red-100 text-red-800', gestor: 'bg-purple-100 text-purple-800', user: 'bg-blue-100 text-blue-800', bko: 'bg-yellow-100 text-yellow-800' }; const roleNames = { admin: 'Admin', gestor: 'Gestor', user: 'Vendedor', bko: 'BKO' }; let roleKey = u.role; if (u.role === 'gestor' && u.isVendedor === false) { roleKey = 'bko'; } let isVendedorToggle = '<td class="p-2 text-center text-gray-400">N/A</td>'; if (u.role === 'gestor' || u.role === 'admin') { const active = u.isVendedor === true; isVendedorToggle = `<td class="p-2 text-center"><button data-uid="${u.id}" data-is-vendedor="${!active}" class="toggle-is-vendedor-btn text-sm font-semibold py-1 px-3 rounded-full ${active ? 'bg-green-500 text-white' : 'bg-gray-300 text-gray-700'}">${active ? 'Sim' : 'Não'}</button></td>`; } else if (u.role === 'user') { isVendedorToggle = `<td class="p-2 text-center"><span class="font-semibold text-green-600">Sim</span></td>`;} return `<tr class="border-b"><td class="p-2 font-medium">${u.nome||'N/A'}</td><td class="p-2 text-gray-600">${u.email}</td><td class="p-2"><span class="px-2 py-1 text-xs font-semibold rounded-full ${roleBadges[roleKey] || 'bg-gray-100'}">${roleNames[roleKey] || 'N/A'}</span></td>${isVendedorToggle}<td class="p-2 flex gap-1"><button data-uid="${u.id}" data-role="user" class="change-role-btn text-sm ${u.role === 'user' ? 'bg-blue-500' : 'bg-gray-300'} text-white py-1 px-2 rounded" title="Tornar Vendedor">V</button><button data-uid="${u.id}" data-role="gestor" class="change-role-btn text-sm ${u.role === 'gestor' ? 'bg-purple-500' : 'bg-gray-300'} text-white py-1 px-2 rounded" title="Tornar Gestor">G</button><button data-uid="${u.id}" data-role="admin" class="change-role-btn text-sm ${u.role === 'admin' ? 'bg-red-500' : 'bg-gray-300'} text-white py-1 px-2 rounded" title="Tornar Admin">A</button></td><td class="p-2 text-center"><button data-uid="${u.id}" class="view-seller-report-btn text-sm bg-blue-600 text-white font-semibold py-1 px-3 rounded-lg hover:bg-blue-700">Relatório</button></td></tr>`; });
    const renderLeadsTable = leads => { const scheduledKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasAgendadas').map(q => q.nome); renderTable('all-leads-table', leads, l => { let subStatusHtml = '<td class="p-2 text-xs">--</td>'; if (scheduledKpiNames.includes(l.qualificacao)) { const statuses = ['Agendado', 'Pendente', 'Cancelado', 'Ativo']; const options = statuses.map(s => `<option value="${s}" ${l.subStatusAgendamento === s ? 'selected' : ''}>${s}</option>`).join(''); subStatusHtml = `<td class="p-2 text-xs"><select data-id="${l.id}" class="substatus-select p-1 border rounded-md text-xs bg-white shadow-sm w-full">${options}</select></td>`; } return `<tr class="border-b" data-id="${l.id}"><td class="p-2">${l.contato||''}</td><td class="p-2">${l.vendedor||''}</td><td class="p-2">${l.qualificacao||''}</td><td class="p-2">${l.cep||''}</td><td class="p-2">${l.numero||''}</td>${subStatusHtml}<td class="p-2 text-xs">${l.createdAt ? new Date(l.createdAt.seconds*1000).toLocaleString('pt-BR'):''}</td><td class="p-2 text-center"><div class="flex items-center justify-center gap-1"><button data-id="${l.id}" class="open-sales-modal-btn text-green-600 p-1" title="Dados da Venda"><i class="fas fa-dollar-sign"></i></button></div></td></tr>`; });};
    const renderSalesTab = () => { const salesKpiNames = allQualificacoesData.filter(q => q.showInSales === 'true').map(q => q.nome); const salesLeads = allLeadsData.filter(l => salesKpiNames.includes(l.qualificacao)); renderTable('sales-table-body', salesLeads, l => `<tr class="border-b"><td class="p-2">${l.contato||''}</td><td class="p-2">${l.vendedor||''}</td><td class="p-2">${l.plano||'N/A'}</td><td class="p-2">R$ ${l.valorPlano||'0.00'}</td><td class="p-2">${l.qualificacao||''}</td><td class="p-2">${l.subStatusAgendamento||'N/A'}</td><td class="p-2 text-xs">${l.dataVenda ? new Date(l.dataVenda + 'T00:00:00').toLocaleDateString('pt-BR') : 'N/A'}</td></tr>`); };
    const renderCasesTable = leads => renderTable('all-cases-table', leads.filter(l => l.descricao_caso), l => { const gestorComment = l.gestor_observacao ? l.gestor_observacao.substring(0, 40) + '...' : '<span class="text-gray-400">Nenhum</span>'; return `<tr class="border-b"><td class="p-2">${l.contato||''}</td><td class="p-2">${l.vendedor||''}</td><td class="p-2 text-xs">${l.descricao_caso.substring(0,50)}...</td><td class="p-2 text-xs font-medium ${l.gestor_observacao ? 'text-blue-600' : ''}">${gestorComment}</td><td class="p-2"><button data-lead-id="${l.id}" class="view-case-btn text-sm bg-gray-600 text-white py-1 px-2 rounded">Ver</button></td></tr>`; });
    const renderReportsTable = reports => renderTable('reports-table', reports, r => `<tr class="border-b"><td class="p-2">${r.id}</td><td class="p-2">${r.leads.length}</td><td class="p-2 flex gap-2"><button data-report-id="${r.id}" class="view-report-btn text-sm bg-blue-600 text-white py-1 px-2 rounded hover:bg-blue-700">Ver</button><button data-report-id="${r.id}" class="export-report-btn text-sm bg-green-500 text-white py-1 px-2 rounded hover:bg-green-500">Exportar</button></td></tr>`);
    const renderLogsTable = logs => renderTable('logs-table', logs, l => `<tr class="border-b"><td class="p-2 text-xs">${l.timestamp ? new Date(l.timestamp.seconds*1000).toLocaleString('pt-BR'):''}</td><td class="p-2">${l.action}</td><td class="p-2 text-xs">${l.details} por ${l.userEmail||''}</td></tr>`);
    const renderQualificacoesList = (qualificacoes) => { const listDiv = document.getElementById('qualificacoes-list'); if(listDiv) { listDiv.innerHTML = qualificacoes.map(q => `<div class="flex justify-between items-center bg-gray-100 p-2 rounded"><span>${q.nome}</span><div class="flex gap-2"><button data-id="${q.id}" data-name="${q.nome}" data-kpi-link="${q.kpiLink || 'none'}" data-show-in-sales="${q.showInSales || 'false'}" class="edit-qualificacao-btn text-blue-500 hover:text-blue-700 text-xs font-semibold">Editar</button><button data-id="${q.id}" class="delete-btn text-red-500 hover:text-red-700 text-xs font-semibold">Excluir</button></div></div>`).join(''); }};
    const renderFontesList = docs => { const el = document.getElementById('fontes-list'); if(el) { el.innerHTML = docs.map(d => `<div class="flex justify-between items-center bg-gray-100 p-2 rounded"><span>${d.data().nome}</span><button data-id="${d.id}" class="delete-btn text-red-500 hover:text-red-700 text-xs font-semibold">Excluir</button></div>`).join(''); }};
    
    // --- Lógica de Gerenciamento de Produtos ---
    const renderProductsList = (products) => { const container = document.getElementById('products-list-container'); if (!container) return; if (products.length === 0) { container.innerHTML = `<div class="text-center py-10 border-dashed border-2 rounded-lg"><p class="text-gray-500">Nenhum produto cadastrado ainda.</p></div>`; return; } container.innerHTML = products.map(p => { const originalPrice = p.valorOriginal ? p.valorOriginal.toFixed(2) : '0.00'; const promoPrice = p.valorPromocional && p.valorPromocional > 0 ? p.valorPromocional.toFixed(2) : originalPrice; return `<div class="border rounded-lg p-4 transition-shadow hover:shadow-md"><div class="flex justify-between items-start"><div><p class="font-bold text-lg text-gray-800">${p.nome}</p><p class="text-sm text-gray-500">${p.empresa} - ${p.tipo}</p></div><div class="flex-shrink-0 flex items-center gap-2"><button data-id="${p.id}" class="edit-product-btn text-blue-600 hover:text-blue-800" title="Editar"><i class="fas fa-pencil-alt"></i></button><button data-id="${p.id}" class="delete-product-btn text-red-500 hover:text-red-700" title="Excluir"><i class="fas fa-trash-alt"></i></button></div></div><div class="mt-3 border-t pt-3"><div class="flex items-end gap-4"><p class="text-sm text-gray-500">Original: <span class="line-through">R$ ${originalPrice}</span></p><p class="text-xl font-bold text-green-600">R$ ${promoPrice}</p></div><p class="text-sm text-gray-600 mt-2 whitespace-pre-wrap">${p.inclusoes || 'Nenhuma inclusão descrita.'}</p></div></div>`; }).join(''); };
    const clearProductForm = () => { productForm.reset(); currentEditingProductId = null; productFormTitle.textContent = 'Adicionar Novo Produto'; saveProductBtn.textContent = 'Salvar Produto'; cancelEditBtn.classList.add('hidden'); };
    const handleEditProduct = (productId) => { const product = allProductsData.find(p => p.id === productId); if (!product) return; currentEditingProductId = productId; document.getElementById('product-nome').value = product.nome; document.getElementById('product-valor-original').value = product.valorOriginal; document.getElementById('product-valor-promocional').value = product.valorPromocional || ''; document.getElementById('product-tipo').value = product.tipo; document.getElementById('product-empresa').value = product.empresa; document.getElementById('product-inclusoes').value = product.inclusoes || ''; productFormTitle.textContent = 'Editando Produto'; saveProductBtn.textContent = 'Atualizar Produto'; cancelEditBtn.classList.remove('hidden'); productForm.scrollIntoView({ behavior: 'smooth' }); };
    const handleSaveProduct = async (e) => { e.preventDefault(); const productData = { nome: document.getElementById('product-nome').value.trim(), valorOriginal: parseFloat(document.getElementById('product-valor-original').value), valorPromocional: parseFloat(document.getElementById('product-valor-promocional').value) || 0, tipo: document.getElementById('product-tipo').value.trim(), empresa: document.getElementById('product-empresa').value.trim(), inclusoes: document.getElementById('product-inclusoes').value.trim(), }; if (!productData.nome || !productData.valorOriginal || !productData.tipo || !productData.empresa) { return alert('Por favor, preencha todos os campos obrigatórios.'); } if (currentEditingProductId) { await updateDoc(doc(db, 'produtos', currentEditingProductId), productData); alert('Produto atualizado com sucesso!'); createLog('Produto Atualizado', `Produto: ${productData.nome}`); } else { productData.createdAt = serverTimestamp(); await addDoc(collection(db, 'produtos'), productData); alert('Produto adicionado com sucesso!'); createLog('Produto Adicionado', `Produto: ${productData.nome}`); } clearProductForm(); };
    const handleDeleteProduct = (productId) => { const product = allProductsData.find(p => p.id === productId); if (!product) return; showConfirmationModal('Excluir Produto', `Tem certeza que deseja excluir o produto "${product.nome}"? Esta ação não pode ser desfeita.`, async () => { await deleteDoc(doc(db, 'produtos', productId)); alert('Produto excluído com sucesso!'); createLog('Produto Excluído', `Produto: ${product.nome}`); }); };

    // --- Lógica de Gerenciamento de Times ---
    const renderSupervisoresList = () => { const supervisores = allUsersData.filter(u => u.role === 'admin' || u.role === 'gestor').sort((a,b) => (a.nome || '').localeCompare(b.nome || '')); const listEl = document.getElementById('supervisores-list'); if(listEl) { listEl.innerHTML = supervisores.map(sup => `<div data-uid="${sup.id}" class="supervisor-item p-3 rounded-lg cursor-pointer hover:bg-blue-50 border border-transparent"><p class="font-semibold text-gray-800">${sup.nome}</p><p class="text-xs text-gray-500">${sup.email}</p></div>`).join(''); } };
    const renderVendedoresList = () => { if (!selectedSupervisorId) return; const supervisor = allUsersData.find(u => u.id === selectedSupervisorId); if (!supervisor) return; document.getElementById('vendedores-placeholder').classList.add('hidden'); document.getElementById('vendedores-container').classList.remove('hidden'); document.getElementById('vendedores-list-title').textContent = `Time de ${supervisor.nome}`; const vendedores = allUsersData.filter(u => u.role === 'user').sort((a,b) => (a.nome || '').localeCompare(b.nome || '')); const listEl = document.getElementById('vendedores-list'); listEl.innerHTML = vendedores.map(vend => { const isAssigned = vend.supervisores && vend.supervisores.includes(selectedSupervisorId); return `<label class="flex items-center p-2 rounded-md hover:bg-gray-50"><input type="checkbox" data-vendedor-id="${vend.id}" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" ${isAssigned ? 'checked' : ''}><span class="ml-3 text-sm text-gray-700">${vend.nome}</span></label>`; }).join(''); };
    const handleSaveAssignments = async () => { if (!selectedSupervisorId) return alert('Nenhum supervisor selecionado.'); const batch = writeBatch(db); const checkboxes = document.querySelectorAll('#vendedores-list input[type="checkbox"]'); checkboxes.forEach(box => { const vendedorId = box.dataset.vendedorId; const vendedorRef = doc(db, 'users', vendedorId); const vendedorData = allUsersData.find(u => u.id === vendedorId); const isCurrentlyAssigned = vendedorData.supervisores && vendedorData.supervisores.includes(selectedSupervisorId); if (box.checked && !isCurrentlyAssigned) { batch.update(vendedorRef, { supervisores: arrayUnion(selectedSupervisorId) }); } else if (!box.checked && isCurrentlyAssigned) { batch.update(vendedorRef, { supervisores: arrayRemove(selectedSupervisorId) }); } }); try { await batch.commit(); alert('Time atualizado com sucesso!'); createLog('Gerenciamento de Time', `As atribuições do supervisor ID ${selectedSupervisorId} foram salvas.`); } catch (error) { console.error("Erro ao salvar atribuições: ", error); alert('Ocorreu um erro ao salvar. Tente novamente.'); } };

    // --- Funções de Modal ---
    const openCaseDetailsModal = (lead) => { currentCaseData = lead; document.getElementById('modalCaseTitle').textContent = `Detalhes do Caso: ${lead.contato}`; const body = document.getElementById('modalCaseBody'); const prazo = lead.prazo ? new Date(lead.prazo + 'T00:00:00').toLocaleDateString('pt-BR') : 'Não definido'; body.innerHTML = `<div class="grid grid-cols-1 md:grid-cols-2 gap-4"><div><strong>Vendedor:</strong><p>${lead.vendedor||'N/A'}</p></div><div><strong>Qualificação:</strong><p>${lead.qualificacao||'N/A'}</p></div><div><strong>Nome Completo:</strong><p>${lead.nome_completo||'N/A'}</p></div><div><strong>CPF/CNPJ:</strong><p>${lead.cpf_cnpj||'N/A'}</p></div><div><strong>E-mail:</strong><p>${lead.email||'N/A'}</p></div><div><strong>Prazo de Retorno:</strong><p>${prazo}</p></div><div class="col-span-2"><strong>Endereço:</strong><p>${lead.rua||''} ${lead.numero||''}, ${lead.bairro||''} - ${lead.cidade||''} (CEP: ${lead.cep||''})</p></div><div class="col-span-2"><strong>Descrição do Caso:</strong><p class="whitespace-pre-wrap">${lead.descricao_caso||'N/A'}</p></div><div class="col-span-2"><strong>Comentário do Gestor:</strong><p class="whitespace-pre-wrap font-medium text-blue-700">${lead.gestor_observacao||'Nenhum'}</p></div></div>`; caseDetailsModal.classList.remove('hidden'); };
    const openReportModal = (reportId, report) => { currentReportData = report; document.getElementById('modalReportTitle').textContent = `Leads do Relatório - ${reportId}`; const tableBody = document.getElementById('report-leads-table-body'); if (report.leads && report.leads.length > 0) { tableBody.innerHTML = report.leads.map(l => `<tr class="border-b"><td class="p-2">${l.contato||''}</td><td class="p-2">${l.vendedor||''}</td><td class="p-2">${l.qualificacao||''}</td><td class="p-2">${l.subStatusAgendamento||'N/A'}</td></tr>`).join(''); } else { tableBody.innerHTML = `<tr><td colspan="4" class="p-4 text-center">Nenhum lead neste relatório.</td></tr>`; } reportDetailsModal.classList.remove('hidden'); };
    const openEditQualificacaoModal = (id, name, kpiLink, showInSales) => { currentEditingQualificacaoId = id; document.getElementById('edit-qualificacao-name').value = name; document.getElementById('edit-qualificacao-kpi').value = kpiLink || 'none'; document.getElementById('edit-qualificacao-show-in-sales').value = showInSales || 'false'; editQualificacaoModal.classList.remove('hidden'); };
    const openSalesModal = async (leadId) => { currentEditingLeadId = leadId; const leadDoc = await getDoc(doc(db, 'leads', leadId)); if (leadDoc.exists()) { const data = leadDoc.data(); document.getElementById('saleProtocolo').value = data.protocolo || ''; document.getElementById('saleContrato').value = data.contrato || ''; salesModal.classList.remove('hidden'); } };
    const openSellerReportModal = (userId) => { currentUserForReport = allUsersData.find(u => u.id === userId); if (!currentUserForReport) return; document.getElementById('sellerReportModalTitle').textContent = `Relatório de: ${currentUserForReport.nome}`; const salesKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasRealizadas').map(q => q.nome); const scheduledKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasAgendadas').map(q => q.nome); const sellerLeads = allLeadsData.filter(l => l.userId === userId); const vendas = sellerLeads.filter(l => salesKpiNames.includes(l.qualificacao) || (scheduledKpiNames.includes(l.qualificacao) && l.subStatusAgendamento === 'Ativo')); const estornos = sellerLeads.filter(l => l.subStatusAgendamento === 'Cancelado'); let totalVendasValor = 0, totalEstornosValor = 0; renderTable('seller-sales-table-body', vendas, v => { const valor = parseFloat(v.valorPlano) || 0; totalVendasValor += valor; return `<tr class="border-b"><td class="p-2">${v.dataVenda || 'N/A'}</td><td class="p-2">${v.nome_completo || v.contato}</td><td class="p-2">${v.cpf_cnpj || 'N/A'}</td><td class="p-2">${v.plano || 'N/A'}</td><td class="p-2">R$ ${valor.toFixed(2)}</td><td class="p-2">${v.operadora || 'N/A'}</td></tr>`; }); renderTable('seller-estornos-table-body', estornos, e => { const valor = parseFloat(e.valorPlano) || 0; totalEstornosValor += valor; return `<tr class="border-b"><td class="p-2">${e.dataVenda || 'N/A'}</td><td class="p-2">${e.nome_completo || e.contato}</td><td class="p-2">${e.cpf_cnpj || 'N/A'}</td><td class="p-2">${e.plano || 'N/A'}</td><td class="p-2">R$ ${valor.toFixed(2)}</td><td class="p-2">${e.subStatusAgendamento}</td></tr>`; }); const comissaoPadrao = parseFloat(financeConfig.comissao) || 0; const metaMensal = parseFloat(financeConfig.meta) || 0; const comissaoBonus = parseFloat(financeConfig.bonus) || 0; const considerarEstornos = financeConfig.considerarEstornos === 'true'; let taxaComissao = comissaoPadrao; if (metaMensal > 0 && totalVendasValor >= metaMensal && comissaoBonus > 0) { taxaComissao = comissaoBonus; } const valorBaseComissao = totalVendasValor - (considerarEstornos ? totalEstornosValor : 0); const comissaoCalculada = valorBaseComissao * (taxaComissao / 100); document.getElementById('report-kpi-vendas').textContent = vendas.length; document.getElementById('report-kpi-valor').textContent = `R$ ${totalVendasValor.toFixed(2)}`; document.getElementById('report-kpi-estornos').textContent = `R$ ${totalEstornosValor.toFixed(2)}`; document.getElementById('report-kpi-comissao').textContent = `R$ ${comissaoCalculada.toFixed(2)}`; sellerReportModal.classList.remove('hidden'); };
    
    // --- Lógica de Negócio e Ações ---
    const updateDashboard = (leads) => { const activeSellers = allUsersData.filter(u => u.role === 'user' || (u.role === 'gestor' && u.isVendedor === true) || (u.role === 'admin' && u.isVendedor === true)); const activeSellerNames = activeSellers.map(u => u.nome); const leadsFromActiveSellers = allLeadsData.filter(l => activeSellerNames.includes(l.vendedor)); const salesKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasRealizadas').map(q => q.nome); const scheduledKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasAgendadas').map(q => q.nome); const kpiVendasTotal = leadsFromActiveSellers.filter(l => salesKpiNames.includes(l.qualificacao) || (scheduledKpiNames.includes(l.qualificacao) && l.subStatusAgendamento === 'Ativo')).length; const kpiAgendadasTotal = leadsFromActiveSellers.filter(l => scheduledKpiNames.includes(l.qualificacao) && l.subStatusAgendamento !== 'Ativo').length; document.getElementById('kpi-total').textContent = leads.length; document.getElementById('kpi-vendas').textContent = kpiVendasTotal; document.getElementById('kpi-agendadas').textContent = kpiAgendadasTotal; document.getElementById('kpi-vendedores').textContent = activeSellers.length; const leadsForCharts = leads.filter(l => activeSellerNames.includes(l.vendedor)); const statusCounts = leadsForCharts.reduce((acc, l) => { if(l.qualificacao) acc[l.qualificacao] = (acc[l.qualificacao] || 0) + 1; return acc; }, {}); const vendedorCounts = leadsForCharts.reduce((acc, l) => { if(l.vendedor) acc[l.vendedor] = (acc[l.vendedor] || 0) + 1; return acc; }, {}); renderChart('statusChart', 'doughnut', Object.keys(statusCounts), Object.values(statusCounts)); renderChart('vendedorChart', 'bar', Object.keys(vendedorCounts), Object.values(vendedorCounts), 'Leads por Vendedor'); const salesByVendedor = leadsForCharts.filter(l => salesKpiNames.includes(l.qualificacao) || (scheduledKpiNames.includes(l.qualificacao) && l.subStatusAgendamento === 'Ativo')).reduce((acc, lead) => { if (lead.vendedor) acc[lead.vendedor] = (acc[lead.vendedor] || 0) + 1; return acc; }, {}); const sortedVendedores = Object.entries(salesByVendedor).sort((a, b) => b[1] - a[1]); const leaderboardTable = document.getElementById('leaderboard-table'); if (leaderboardTable) { if (sortedVendedores.length > 0) { leaderboardTable.innerHTML = sortedVendedores.map(([nome, vendas], index) => `<tr class="border-b"><td class="p-2 font-bold">${index+1}º</td><td class="p-2">${nome}</td><td class="p-2">${vendas}</td></tr>`).join(''); } else { leaderboardTable.innerHTML = `<tr><td colspan="3" class="p-4 text-center text-gray-500">Nenhuma venda no período.</td></tr>`; } } const qualificacoesCounts = leadsForCharts.reduce((acc, lead) => { if (lead.qualificacao) acc[lead.qualificacao] = (acc[lead.qualificacao] || 0) + 1; return acc; }, {}); const sortedQualificacoes = Object.entries(qualificacoesCounts).sort((a, b) => b[1] - a[1]).slice(0, 10); renderChart('performanceChart', 'bar', sortedQualificacoes.map(item => item[0]), sortedQualificacoes.map(item => item[1]), 'Total de Ocorrências'); };
    const applyFilters = () => { const searchTerm = document.getElementById('search-input').value.toLowerCase().trim(); const filters = { date: document.getElementById('date-filter').value, vendedor: document.getElementById('filter-vendedor').value, fonte: document.getElementById('filter-fonte').value, qualificacao: document.getElementById('filter-qualificacao').value }; let filteredLeads = allLeadsData; if (filters.date !== 'all') { const now = new Date(); let startDate = new Date(); if (filters.date === 'today') startDate.setHours(0,0,0,0); else if (filters.date === '7days') startDate.setDate(now.getDate() - 7); else if (filters.date === '30days') startDate.setDate(now.getDate() - 30); filteredLeads = filteredLeads.filter(l => l.createdAt && l.createdAt.toDate() >= startDate); } if (filters.vendedor !== 'all') filteredLeads = filteredLeads.filter(l => l.vendedor === filters.vendedor); if (filters.fonte !== 'all') filteredLeads = filteredLeads.filter(l => l.fonte === filters.fonte); if (filters.qualificacao !== 'all') filteredLeads = filteredLeads.filter(l => l.qualificacao === filters.qualificacao); if (searchTerm) { filteredLeads = filteredLeads.filter(l => (l.contato && l.contato.includes(searchTerm)) || (l.nome_completo && l.nome_completo.toLowerCase().includes(searchTerm)) ); } updateDashboard(filteredLeads); renderLeadsTable(filteredLeads); renderCasesTable(filteredLeads); renderSalesTab(); };
    const saveSaleData = async () => { if (!currentEditingLeadId) return; await updateDoc(doc(db, 'leads', currentEditingLeadId), { protocolo: document.getElementById('saleProtocolo').value, contrato: document.getElementById('saleContrato').value }); salesModal.classList.add('hidden'); alert('Dados da venda salvos com sucesso!'); };
    const autoSaveChanges = async () => { const now = new Date(); const todayStr = now.toISOString().split('T')[0]; const lastSave = localStorage.getItem('lastAutoSave'); if (lastSave === todayStr) { return; } const reportRef = doc(db, 'relatorios_diarios', todayStr); if ((await getDoc(reportRef)).exists()) { localStorage.setItem('lastAutoSave', todayStr); return; } const inicioDoDia = new Date(); inicioDoDia.setHours(0,0,0,0); const leadsDeHoje = allLeadsData.filter(lead => lead.createdAt && lead.createdAt.toDate() >= inicioDoDia); if (leadsDeHoje.length > 0) { await setDoc(reportRef, { leads: leadsDeHoje, createdAt: serverTimestamp() }); localStorage.setItem('lastAutoSave', todayStr); await createLog('Backup Automático', `Relatório de ${todayStr} salvo com ${leadsDeHoje.length} leads.`); } };
    
    // --- Funções de Exportação (PDF & CSV) ---
    const exportDashboardPDF = () => { const { jsPDF } = window.jspdf; const doc = new jsPDF(); let cursorY = 20; doc.setFontSize(18).text("Relatório de Performance - Piel Telecom", 105, cursorY, {align:'center'}); cursorY+=5; doc.setFontSize(10).text(new Date().toLocaleString('pt-BR'), 105, cursorY, {align:'center'}); cursorY+=15; doc.setFontSize(12).text("Resumo das Métricas", 14, cursorY); cursorY+=7; const kpiVendas=parseInt(document.getElementById('kpi-vendas').textContent), kpiAgendadas=parseInt(document.getElementById('kpi-agendadas').textContent), kpiTotalFiltrado=parseInt(document.getElementById('kpi-total').textContent), totalLeadsGeral=allLeadsData.length; const taxaConversao=totalLeadsGeral > 0 ? ((kpiVendas / totalLeadsGeral) * 100).toFixed(2) : 0; const summaryText=`Este relatório apresenta os dados de performance gerais e do filtro atual.\n\nMétricas Gerais (Todo o Período):\n- Total de Vendas Realizadas: ${kpiVendas}\n- Total de Vendas Agendadas: ${kpiAgendadas}\n- Taxa de Conversão Geral: ${taxaConversao}%\n\nMétricas no Filtro Atual:\n- Total de Leads no Filtro: ${kpiTotalFiltrado}`; doc.setFontSize(10); const lines=doc.splitTextToSize(summaryText, 180); doc.text(lines, 14, cursorY); cursorY+=(lines.length * 5) + 10; doc.setFontSize(12).text("Gráficos (Visão do Filtro Atual)", 14, cursorY); cursorY+=7; const statusChartImg=document.getElementById('statusChart').toDataURL('image/png',1.0); const vendedorChartImg=document.getElementById('vendedorChart').toDataURL('image/png',1.0); doc.addImage(statusChartImg,'PNG',14,cursorY,80,80); doc.addImage(vendedorChartImg,'PNG',115,cursorY,80,80); cursorY+=95; if(cursorY > 250) { doc.addPage(); cursorY = 20; } doc.setFontSize(12).text("Ranking de Vendedores (Vendas no Filtro Atual)", 14, cursorY); const salesKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasRealizadas').map(q => q.nome); const scheduledKpiNames = allQualificacoesData.filter(q => q.kpiLink === 'vendasAgendadas').map(q => q.nome); const leadsNoFiltro = allLeadsData.filter(lead => { const row = document.querySelector(`#all-leads-table tr[data-id="${lead.id}"]`); return !!row; }); const salesByVendedor = leadsNoFiltro.filter(l => salesKpiNames.includes(l.qualificacao) || (scheduledKpiNames.includes(l.qualificacao) && l.subStatusAgendamento === 'Ativo')).reduce((acc, lead) => { if (lead.vendedor) acc[lead.vendedor] = (acc[lead.vendedor] || 0) + 1; return acc; }, {}); const sortedVendedores = Object.entries(salesByVendedor).sort((a, b) => b[1] - a[1]); doc.autoTable({ startY: cursorY+5, head: [['Pos.', 'Vendedor', 'Vendas']], body: sortedVendedores.map(([nome, vendas], index) => [ `${index+1}º`, nome, vendas ]), theme: 'grid' }); doc.save(`Resumo_Dashboard_${new Date().toISOString().split('T')[0]}.pdf`); };
    const exportSingleCasePDF = (lead) => { const { jsPDF } = window.jspdf; const doc = new jsPDF(); let cursorY = 20; const margin = 15, maxWidth = doc.internal.pageSize.getWidth() - margin * 2; doc.setFontSize(18).text(`Relatório de Caso: ${lead.contato||'N/A'}`, 105, cursorY, {align:'center'}); cursorY+=15; doc.setFontSize(10).setTextColor(100).text(`Vendedor: ${lead.vendedor||'N/A'}`, margin, cursorY); doc.setFontSize(10).setTextColor(100).text(`Nome: ${lead.nome_completo||'N/A'}`, 90, cursorY); cursorY+=10; doc.setFontSize(12).setTextColor(0).text("Descrição do Caso", margin, cursorY); cursorY+=5; doc.line(margin, cursorY, 200, cursorY); cursorY+=7; doc.setFontSize(10).text(doc.splitTextToSize(lead.descricao_caso||'S/ Descrição.', maxWidth), margin, cursorY); doc.save(`Caso_${lead.contato}.pdf`);};
    const exportSellerReportPDF = () => { if (!currentUserForReport) return; const { jsPDF } = window.jspdf; const doc = new jsPDF(); const userName = currentUserForReport.nome || 'N/A'; let cursorY = 20; doc.setFontSize(18).text(`Relatório de Vendas: ${userName}`, 105, cursorY, { align: 'center' }); cursorY += 10; doc.setFontSize(10).text(new Date().toLocaleDateString('pt-BR'), 105, cursorY, { align: 'center' }); cursorY += 15; const kpiVendas = document.getElementById('report-kpi-vendas').textContent; const kpiValor = document.getElementById('report-kpi-valor').textContent; const kpiEstornos = document.getElementById('report-kpi-estornos').textContent; const kpiComissao = document.getElementById('report-kpi-comissao').textContent; doc.setFontSize(12).text('Resumo do Período', 14, cursorY); cursorY += 7; doc.setFontSize(10).text(`- Vendas Realizadas: ${kpiVendas}`, 14, cursorY); cursorY += 5; doc.setFontSize(10).text(`- Valor Total (Vendas): ${kpiValor}`, 14, cursorY); cursorY += 5; doc.setFontSize(10).text(`- Total Estornos: ${kpiEstornos}`, 14, cursorY); cursorY += 5; doc.setFontSize(10).text(`- Comissão Estimada: ${kpiComissao}`, 14, cursorY); cursorY += 15; if (document.getElementById('seller-sales-table-body').rows.length > 0) { doc.setFontSize(12).text('Detalhes das Vendas', 14, cursorY); doc.autoTable({ startY: cursorY + 5, html: '#seller-sales-table-body', head: [['Data', 'Cliente', 'CPF', 'Plano', 'Valor', 'Operadora']], theme: 'grid' }); cursorY = doc.autoTable.previous.finalY + 15; } if (document.getElementById('seller-estornos-table-body').rows.length > 0) { if(cursorY > 250) { doc.addPage(); cursorY = 20; } doc.setFontSize(12).text('Detalhes dos Estornos', 14, cursorY); doc.autoTable({ startY: cursorY + 5, html: '#seller-estornos-table-body', head: [['Data', 'Cliente', 'CPF', 'Plano', 'Valor', 'Status']], theme: 'grid' }); } doc.save(`Relatorio_${userName}_${new Date().toISOString().split('T')[0]}.pdf`); };
    const handleFileUpload = async (event) => { const file = event.target.files[0]; if (!file) return; const dateMatch = file.name.match(/(\d{4}-\d{2}-\d{2})/); if (!dateMatch) { alert('Erro: O nome do arquivo não contém data no formato AAAA-MM-DD.'); return event.target.value = ''; } const reportDateId = dateMatch[0]; const reportRef = doc(db, 'relatorios_diarios', reportDateId); if ((await getDoc(reportRef)).exists()) { alert(`Relatório para ${reportDateId} já existe.`); return event.target.value = ''; } const reader = new FileReader(); reader.onerror = () => alert('Erro ao ler o arquivo.'); reader.onload = async (e) => { const rows = e.target.result.split('\n').slice(1); const leadsForReport = [], notFoundVendors = new Set(); let createdCount = 0, updatedCount = 0; const batch = writeBatch(db); for (const rowStr of rows) { if (!rowStr.trim()) continue; const [contato, nomeVendedor, fonte, qualificacao] = rowStr.split(';').map(s => s.trim().replace(/"/g, '')); const vendedorEncontrado = allUsersData.find(u => u.nome && u.nome.toLowerCase() === nomeVendedor.toLowerCase()); if (vendedorEncontrado) { const q = query(collection(db, 'leads'), where("contato", "==", contato)); const existingLeadSnap = await getDocs(q); const leadData = { contato, vendedor: vendedorEncontrado.nome, userId: vendedorEncontrado.id, fonte: fonte || '', qualificacao: qualificacao || ''}; if (existingLeadSnap.empty) { leadData.createdAt = serverTimestamp(); leadData.lastAction = 'Criado'; batch.set(doc(collection(db, 'leads')), leadData); createdCount++; } else { const existingDocRef = existingLeadSnap.docs[0].ref; leadData.lastUpdatedAt = serverTimestamp(); leadData.lastAction = 'Atualizado'; batch.update(existingDocRef, leadData); updatedCount++; } leadsForReport.push(leadData); } else { notFoundVendors.add(nomeVendedor); } } if (createdCount > 0 || updatedCount > 0) { await setDoc(reportRef, { leads: leadsForReport, createdAt: serverTimestamp() }); await batch.commit(); } let feedback = `Importação concluída!\n\n- ${createdCount} leads criados.\n- ${updatedCount} leads atualizados.\n- Relatório para ${reportDateId} salvo.`; if (notFoundVendors.size > 0) feedback += `\n\nVendedores não encontrados: ${Array.from(notFoundVendors).join(', ')}`; alert(feedback); createLog('Importação CSV', feedback); }; reader.readAsText(file, 'UTF-8'); event.target.value = ''; };

    // --- Carregamento de Dados e Configurações Iniciais ---
    const loadFinancialConfig = async () => { const configRef = doc(db, 'configuracoes', 'financeiras'); const configSnap = await getDoc(configRef); if (configSnap.exists()) { financeConfig = configSnap.data(); document.getElementById('config-comissao').value = financeConfig.comissao || ''; document.getElementById('config-meta').value = financeConfig.meta || ''; document.getElementById('config-bonus').value = financeConfig.bonus || ''; document.getElementById('config-estornos-toggle').value = financeConfig.considerarEstornos || 'true'; } };
    const listenToAllData = () => {  onSnapshot(query(collection(db, 'leads'), orderBy('createdAt', 'desc')), s => { allLeadsData = s.docs.map(d => ({id: d.id, ...d.data()})); applyFilters(); }); onSnapshot(collection(db, 'users'), s => { allUsersData = s.docs.map(d => ({id: d.id, ...d.data()})); renderUsersTable(allUsersData); const activeSellers = allUsersData.filter(u => u.role === 'user' || (u.role === 'gestor' && u.isVendedor) || (u.role === 'admin' && u.isVendedor)); populateFilter('filter-vendedor', activeSellers.map(u => u.nome)); applyFilters(); renderSupervisoresList(); }); onSnapshot(query(collection(db, 'qualificacoes'), orderBy('nome')), s => { allQualificacoesData = s.docs.map(d => ({ id: d.id, ...d.data() })); renderQualificacoesList(allQualificacoesData); populateFilter('filter-qualificacao', allQualificacoesData.map(q => q.nome)); }); onSnapshot(query(collection(db, 'fontes'), orderBy('nome')), s => { renderFontesList(s.docs); populateFilter('filter-fonte', s.docs.map(d => d.data().nome)); }); onSnapshot(query(collection(db, 'relatorios_diarios'), orderBy('createdAt', 'desc')), s => renderReportsTable(s.docs.map(d => ({id: d.id, ...d.data()})))); onSnapshot(query(collection(db, 'logs'), orderBy('timestamp', 'desc')), s => renderLogsTable(s.docs.map(d => d.data()))); onSnapshot(query(collection(db, 'produtos'), orderBy('createdAt', 'desc')), s => { allProductsData = s.docs.map(d => ({id: d.id, ...d.data()})); renderProductsList(allProductsData); }); };

    // --- Setup de Event Listeners ---
    const setupEventListeners = () => {
        // Navegação
        document.getElementById('hamburger-btn').addEventListener('click', () => { document.getElementById('sidebar').classList.toggle('hidden'); });
        navLinks.forEach(link => link.addEventListener('click', e => { if (!link.href.includes('central.desktop.com.br')) { e.preventDefault(); const targetId = link.getAttribute('href').substring(1); pageSections.forEach(s => s.classList.add('hidden')); document.getElementById(`${targetId}-section`).classList.remove('hidden'); navLinks.forEach(l => l.classList.remove('bg-gray-200')); link.classList.add('bg-gray-200'); pageTitle.textContent = link.querySelector('span').textContent; }}));
        
        // Ações do Dashboard
        document.getElementById('refresh-dashboard-btn').addEventListener('click', () => { const btn = document.getElementById('refresh-dashboard-btn'), icon = btn.querySelector('i'); icon.classList.add('fa-spin'); btn.disabled = true; applyFilters(); setTimeout(() => { icon.classList.remove('fa-spin'); btn.disabled = false; }, 500); });
        document.getElementById('export-dashboard-btn').addEventListener('click', exportDashboardPDF);
        document.getElementById('reset-qualificadores-btn').addEventListener('click', () => showConfirmationModal('Resetar Qualificadores', 'Esta ação apagará TODOS os leads. Esta ação não pode ser desfeita. Deseja continuar?', async () => { const leadsCollection = collection(db, 'leads'); const snapshot = await getDocs(leadsCollection); const batch = writeBatch(db); snapshot.docs.forEach(d => batch.delete(d.ref)); await batch.commit(); createLog('Reset Geral', `${snapshot.docs.length} leads foram apagados.`); alert('Todos os leads foram resetados com sucesso!'); }));
        document.getElementById('reset-dashboard-btn').addEventListener('click', () => showConfirmationModal('Resetar Dashboard (Hoje)', 'Esta ação apagará os leads criados HOJE. Deseja continuar?', async () => { const inicioDoDia = new Date(); inicioDoDia.setHours(0,0,0,0); const q = query(collection(db, 'leads'), where('createdAt', '>=', inicioDoDia)); const snapshot = await getDocs(q); if (snapshot.empty) return alert('Nenhum lead criado hoje para resetar.'); const batch = writeBatch(db); snapshot.docs.forEach(d => batch.delete(d.ref)); await batch.commit(); await createLog('Reset Diário', `${snapshot.docs.length} leads de hoje foram apagados.`); alert(`${snapshot.docs.length} leads de hoje foram resetados com sucesso!`); }));
        
        // Filtros da Tabela de Leads
        document.querySelectorAll('#filter-qualificacao, #filter-fonte, #filter-vendedor, #date-filter, #search-input').forEach(el => el.addEventListener(el.id === 'search-input' ? 'input' : 'change', applyFilters));

        // Ações da Tabela de Leads
        document.getElementById('all-leads-table').addEventListener('click', e => { const salesBtn = e.target.closest('.open-sales-modal-btn'); if(salesBtn) { openSalesModal(salesBtn.dataset.id); } });
        document.getElementById('all-leads-table').addEventListener('change', async (e) => { if (e.target.classList.contains('substatus-select')) { const leadId = e.target.dataset.id; const newStatus = e.target.value; if (leadId) { await updateDoc(doc(db, 'leads', leadId), { subStatusAgendamento: newStatus }); } } });
        
        // Modais
        document.getElementById('cancelAction').addEventListener('click', () => confirmationModal.classList.add('hidden'));
        document.getElementById('confirmAction').addEventListener('click', () => { if (confirmCallback) confirmCallback(); confirmationModal.classList.add('hidden'); });
        document.getElementById('closeSalesModal').addEventListener('click', () => salesModal.classList.add('hidden')); 
        document.getElementById('cancelSalesModal').addEventListener('click', () => salesModal.classList.add('hidden')); 
        document.getElementById('saveSaleBtn').addEventListener('click', saveSaleData);
        document.getElementById('closeCaseDetailsModal').addEventListener('click', () => { caseDetailsModal.classList.add('hidden'); });
        document.getElementById('exportCaseToPdfBtn').addEventListener('click', () => { if (currentCaseData) exportSingleCasePDF(currentCaseData); });
        document.getElementById('closeReportModal').addEventListener('click', () => { reportDetailsModal.classList.add('hidden'); currentReportData = null; });
        document.getElementById('exportReportModalBtn').addEventListener('click', () => { if (currentReportData && currentReportData.leads.length > 0) { const reportId = document.getElementById('modalReportTitle').textContent.split(' - ')[1]; downloadCSV(currentReportData.leads, `Relatorio-${reportId}`); } else { alert('Não há leads para exportar.'); } });
        document.getElementById('cancelEditQualificacao').addEventListener('click', () => editQualificacaoModal.classList.add('hidden'));
        document.getElementById('saveEditQualificacao').addEventListener('click', async () => { if (!currentEditingQualificacaoId) return; const newName = document.getElementById('edit-qualificacao-name').value.trim(); const newKpiLink = document.getElementById('edit-qualificacao-kpi').value; const showInSales = document.getElementById('edit-qualificacao-show-in-sales').value; if (!newName) return alert('O nome não pode ser vazio.'); await updateDoc(doc(db, 'qualificacoes', currentEditingQualificacaoId), { nome: newName, kpiLink: newKpiLink, showInSales: showInSales }); editQualificacaoModal.classList.add('hidden'); currentEditingQualificacaoId = null; });
        document.getElementById('closeSellerReportModal').addEventListener('click', () => sellerReportModal.classList.add('hidden'));
        document.getElementById('exportSellerReportPdf').addEventListener('click', exportSellerReportPDF);
        
        // Seção de Casos
        document.getElementById('all-cases-table').addEventListener('click', (e) => { const viewButton = e.target.closest('.view-case-btn'); if (viewButton) { const leadId = viewButton.dataset.leadId; const leadData = allLeadsData.find(l => l.id === leadId); if (leadData) { openCaseDetailsModal(leadData); } } });
        
        // Seção de Relatórios
        document.getElementById('reports-table').addEventListener('click', async (e) => { const target = e.target; const reportId = target.dataset.reportId; if (!reportId) return; if (target.classList.contains('view-report-btn')) { const reportSnap = await getDoc(doc(db, 'relatorios_diarios', reportId)); if (reportSnap.exists()) openReportModal(reportId, reportSnap.data()); else alert('Relatório não encontrado.'); } if (target.classList.contains('export-report-btn')) { const reportSnap = await getDoc(doc(db, 'relatorios_diarios', reportId)); if (reportSnap.exists()) downloadCSV(reportSnap.data().leads, `Relatorio-${reportId}`); } });
        document.getElementById('saveReportBtn').addEventListener('click', () => showConfirmationModal('Salvar Relatório do Dia', 'Isto criará um backup apenas com os leads criados HOJE. Deseja continuar?', async () => { const date = new Date().toISOString().split('T')[0]; if ((await getDoc(doc(db, 'relatorios_diarios', date))).exists()) return alert('O relatório de hoje já foi salvo.'); const inicioDoDia = new Date(); inicioDoDia.setHours(0,0,0,0); const leadsDeHoje = allLeadsData.filter(lead => lead.createdAt && lead.createdAt.toDate() >= inicioDoDia); if (leadsDeHoje.length === 0) return alert('Nenhum lead novo foi criado hoje para salvar.'); await setDoc(doc(db, 'relatorios_diarios', date), { leads: leadsDeHoje, createdAt: serverTimestamp() }); createLog('Relatório Salvo', `Relatório de ${date} salvo com ${leadsDeHoje.length} leads.`); alert(`Relatório salvo com ${leadsDeHoje.length} leads de hoje!`); }));
        
        // Seção de Logs/Importação
        document.getElementById('import-csv-btn').addEventListener('click', () => document.getElementById('csv-importer').click());
        document.getElementById('csv-importer').addEventListener('change', handleFileUpload);

        // Seção de Usuários
        document.getElementById('users-table').addEventListener('click', (e) => { const reportBtn = e.target.closest('.view-seller-report-btn'); const roleBtn = e.target.closest('.change-role-btn'); const toggleBtn = e.target.closest('.toggle-is-vendedor-btn'); if (reportBtn) { openSellerReportModal(reportBtn.dataset.uid); } if (toggleBtn) { const userId = toggleBtn.dataset.uid; const newIsVendedorStatus = toggleBtn.dataset.isVendedor === 'true'; showConfirmationModal('Alterar Status de Vendedor', `Deseja confirmar que este usuário ${newIsVendedorStatus ? 'agora atua' : 'não atua mais'} como vendedor?`, async () => { await updateDoc(doc(db, 'users', userId), { isVendedor: newIsVendedorStatus }); await createLog('Status de Vendedor Alterado', `Usuário ID ${userId} agora ${newIsVendedorStatus ? 'atua' : 'não atua'} como vendedor.`); }); } if (roleBtn) { const userId = roleBtn.dataset.uid; const newRole = roleBtn.dataset.role; const user = allUsersData.find(u => u.id === userId); if(user.id === adminUser.uid && newRole !== 'admin') { return alert('Você não pode remover seu próprio acesso de administrador.'); } showConfirmationModal('Mudar Função de Usuário', `Tem certeza que deseja alterar a função de ${user.nome} para ${newRole}?`, async () => { const dataToUpdate = { role: newRole }; if (newRole !== 'gestor' && newRole !== 'admin') { dataToUpdate.isVendedor = null; } else if (user.role !== 'gestor' && user.role !== 'admin') { dataToUpdate.isVendedor = false; } await updateDoc(doc(db, 'users', userId), dataToUpdate); await createLog('Mudança de Função', `Usuário ${user.email} teve sua função alterada para ${newRole}.`); }); } });
        
        // Seção de Configurações
        document.getElementById('add-qualificacao-btn').addEventListener('click', async () => { const nome = document.getElementById('new-qualificacao-input').value.trim(); if (nome) { await addDoc(collection(db, 'qualificacoes'), { nome, kpiLink: 'none', showInSales: 'false' }); document.getElementById('new-qualificacao-input').value = ''; } });
        document.getElementById('add-fonte-btn').addEventListener('click', async () => { const nome = document.getElementById('new-fonte-input').value.trim(); if (nome) { await addDoc(collection(db, 'fontes'), { nome }); document.getElementById('new-fonte-input').value = ''; } });
        document.getElementById('qualificacoes-list').addEventListener('click', async e => { const deleteBtn = e.target.closest('.delete-btn'); const editBtn = e.target.closest('.edit-qualificacao-btn'); if (deleteBtn) { showConfirmationModal('Excluir Qualificação', 'Tem certeza?', async () => { await deleteDoc(doc(db, 'qualificacoes', deleteBtn.dataset.id)); }); } if (editBtn) { openEditQualificacaoModal(editBtn.dataset.id, editBtn.dataset.name, editBtn.dataset.kpiLink, editBtn.dataset.showInSales); } });
        document.getElementById('fontes-list').addEventListener('click', async e => { const deleteBtn = e.target.closest('.delete-btn'); if (deleteBtn) { showConfirmationModal('Excluir Fonte', 'Tem certeza?', async () => { await deleteDoc(doc(db, 'fontes', deleteBtn.dataset.id)); }); } });
        document.getElementById('save-finance-config-btn').addEventListener('click', async () => { const config = { comissao: document.getElementById('config-comissao').value, meta: document.getElementById('config-meta').value, bonus: document.getElementById('config-bonus').value, considerarEstornos: document.getElementById('config-estornos-toggle').value }; await setDoc(doc(db, 'configuracoes', 'financeiras'), config); await createLog('Config. Financeiras', 'Configurações financeiras foram atualizadas.'); alert('Configurações financeiras salvas!'); });
        
        // Seção de Produtos
        productForm.addEventListener('submit', handleSaveProduct);
        cancelEditBtn.addEventListener('click', clearProductForm);
        document.getElementById('products-list-container')?.addEventListener('click', e => { const editBtn = e.target.closest('.edit-product-btn'); const deleteBtn = e.target.closest('.delete-product-btn'); if (editBtn) handleEditProduct(editBtn.dataset.id); if (deleteBtn) handleDeleteProduct(deleteBtn.dataset.id); });
        
        // Seção de Times
        document.getElementById('supervisores-list')?.addEventListener('click', e => { const supervisorItem = e.target.closest('.supervisor-item'); if (!supervisorItem) return; document.querySelectorAll('.supervisor-item').forEach(item => { item.classList.remove('bg-blue-100', 'border-blue-300'); }); supervisorItem.classList.add('bg-blue-100', 'border-blue-300'); selectedSupervisorId = supervisorItem.dataset.uid; renderVendedoresList(); });
        document.getElementById('save-assignments-btn')?.addEventListener('click', handleSaveAssignments);
    };

    // --- Inicialização da Aplicação ---
    listenToAllData();
    loadFinancialConfig();
    setupEventListeners();
    setInterval(autoSaveChanges, 1000 * 60 * 60); // Backup automático a cada hora
}